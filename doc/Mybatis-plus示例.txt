mybatis-plus-sample-active-record
mybatis-plus-sample-cascade
mybatis-plus-sample-deluxe
mybatis-plus-sample-enum -- 不知道其应用场景
mybatis-plus-sample-logic-delete
mybatis-plus-sample-sql-injector
mybatis-plus-sample-tenant -- 多租户

+---------------------------+
|    Mybatis plus 示例      |
+---------------------------+

/**
 * 全表查询
 * 框架生成语句为: SELECT ... FROM user
 */
public void selectAll() {
    List<User> userList = userMapper.selectList(null);
    Assert.assertEquals(5, userList.size());
    userList.forEach(System.out::println);
}

/**
 * 根据主键 ID 查询
 * 框架生成语句为: SELECT ... FROM user WHERE id = 123123131231
 */
public void selectById() {
    User user = userMapper.selectById(123123131231L);
}

/**
 * 根据多个 ID 查询。
 * 框架生成语句为: SELECT ... FROM user WHERE id IN (1111111, 222222, 3333333)
 */
public void selectByIds() {
    List<Long> idsList = Arrays.asList(1111111L, 222222L, 3333333L);
    List<User> userList = userMapper.selectBatchIds(idsList);
    userList.forEach(System.out::println);
}

/**
 * 通过 Map 传入查询条件参数
 * 框架生成的语句为: SELECT id, name, age, email, manager_id, create_time FROM user WHERE name = '林子' AND age = 29
 */
public void selectByMap() {
    Map<String, Object> map = new HashMap<>();
    map.put("name", "林子"); // 注意: key 是数据库中的列名，不是实体类的属性名!
    map.put("age", 29);
    List<User> userList = userMapper.selectByMap(map);
}

/**
 * 通过条件构造器
 * 框架生成的语句为: SELECT id, name, age, email, manager_id, create_time FROM user WHERE name like %周% AND age < 40
 */
public void selectByWrapper1() {
    QueryWrapper<User> queryWrapper = new QueryWrapper<>();
    queryWrapper.like("name", "周").lt("age", 40);
    List<User> userList = userMapper.selectList(queryWrapper);
}


public void selectByWrapper2() {
    QueryWrapper<User> queryWrapper = new QueryWrapper<>();
    queryWrapper.like("name", "周").lt("age", 40);
    List<User> userList = userMapper.selectList(queryWrapper);
}

/**
 * 通过条件构造器
 * 框架生成的语句为: SELECT id, name, age, email, manager_id, create_time FROM user WHERE name like %周% AND age BETWEEN 20 AND 40 AND email IS NOT NULL
 */
public void selectByWrapper2() {
	QueryWrapper<User> queryWrapper = new QueryWrapper<>();
	queryWrapper.like("name", "周").between("age", 20, 40).isNotNull("email");
	List<User> list = userMapper.selectList(queryWrapper);
	list.forEach(System.out::println);
}

/**
 * 通过条件构造器
 * 框架生成的语句为: SELECT id, name, age, email, manager_id, create_time FROM user WHERE name like 王% OR age >= 25 ORDER BY age DESC, id ASC
 */
public void selectByWrapper3() {
	QueryWrapper<User> queryWrapper = new QueryWrapper<>();
	queryWrapper.likeRight("name", "王").or().ge("age", 25)
		.orderByDesc("age").orderByAsc("id");
	List<User> list = userMapper.selectList(queryWrapper);
	list.forEach(System.out::println);
}

/**
 * 通过条件构造器
 * 框架生成的语句为: SELECT id, name, age, email, manager_id, create_time FROM user
 *                  WHERE date_format(create_time, '%Y-%m-%d') = '2019-02-14'
 *                    AND manager_id IN (SELECT id FROM user WHERE name LIKE '王%')
 */
public void selectByWrapper4() {
	QueryWrapper<User> queryWrapper = new QueryWrapper<>();
	// {0} 可以防止 SQL 注入风险。
	queryWrapper.apply("date_format(create_time, '%Y-%m-%d') = {0}", "2019-02-14").inSql("manager_id", "SELECT id FROM user WHERE name LIKE '王%'");
	List<User> list = userMapper.selectList(queryWrapper);
	list.forEach(System.out::println);
}

/**
 * 通过条件构造器
 * 框架生成的语句为: SELECT id, name, age, email, manager_id, create_time FROM user
 *                  WHERE name LIKE '王%' AND (age < 40 OR email IS NOT NULL)
 */
public void selectByWrapper5() {
	QueryWrapper<User> queryWrapper = new QueryWrapper<>();
	queryWrapper.likeRight("name", "王").and(qw -> qw.lt("age", 40).or().isNotNull("email"));
	List<User> list = userMapper.selectList(queryWrapper);
	list.forEach(System.out::println);
}

/**
 * 通过条件构造器
 * 框架生成的语句为: SELECT id, name, age, email, manager_id, create_time FROM user
 *                  WHERE name LIKE '王%' OR (age < 40 AND age >20 AND email IS NOT NULL)
 */
public void selectByWrapper6() {
	QueryWrapper<User> queryWrapper = new QueryWrapper<>();
	queryWrapper.likeRight("name", "王").or(qw -> qw.lt("age", 40).gt("age", 20).isNotNull("email"));
	List<User> list = userMapper.selectList(queryWrapper);
	list.forEach(System.out::println);
}

/**
 * 通过条件构造器
 * 框架生成的语句为: SELECT id, name, age, email, manager_id, create_time FROM user
 *                  WHERE (age < 40 OR email IS NOT NULL)
 *                    AND name LIKE '王%'
 */
public void selectByWrapper7() {
	QueryWrapper<User> queryWrapper = new QueryWrapper<>();
	queryWrapper.nested(qw -> qw.lt("age", 40).or().isNotNull("email")).likeRight("name", "王");
	List<User> list = userMapper.selectList(queryWrapper);
	list.forEach(System.out::println);
}

/**
 * 通过条件构造器
 * 框架生成的语句为: SELECT id, name, age, email, manager_id, create_time FROM user WHERE age IN (30,31,34,35)
 */
public void selectByWrapper8() {
	QueryWrapper<User> queryWrapper = new QueryWrapper<>();
	queryWrapper.in("age", Arrays.asList(30, 31, 34, 35));
	List<User> list = userMapper.selectList(queryWrapper);
	list.forEach(System.out::println);
}

/**
 * 通过条件构造器，限定查询数据条数 LIMIT，注意：这里要慎重使用，有 SQL 注入风险！
 * 框架生成的语句为: SELECT id, name, age, email, manager_id, create_time FROM user WHERE age IN (30,31,34,35) LIMIT 1
 */
public void selectByWrapper9() {
	QueryWrapper<User> queryWrapper = new QueryWrapper<>();
	queryWrapper.in("age", Arrays.asList(30, 31, 34, 35)).last("LIMIT 1");
	List<User> list = userMapper.selectList(queryWrapper);
	list.forEach(System.out::println);
}

/**
 * 通过条件构造器，指定需要的列
 * 框架生成的语句为: SELECT id, name FROM user WHERE name LIKE '雨%' age < 40
 */
public void selectByWrapperWithColumn() {
	QueryWrapper<User> queryWrapper = new QueryWrapper<>();
	queryWrapper.select("id", "name").likeRight("name", "雨").lt("age", 40);
	List<User> list = userMapper.selectList(queryWrapper);
	list.forEach(System.out::println);
}

/**
 * 通过条件构造器，排除特定的列
 * 框架生成的语句为: SELECT id, name, age, email FROM user WHERE name LIKE '雨%' age < 40
 */
public void selectByWrapperWithoutColumn() {
	QueryWrapper<User> queryWrapper = new QueryWrapper<>();
	queryWrapper.select(User.class, info -> !info.getColumn().equals("create_time") && !info.getColumn().equals("manager_id"))
		.likeRight("name", "雨").lt("age", 40);
	List<User> list = userMapper.selectList(queryWrapper);
	list.forEach(System.out::println);
}

/**
 * 动态条件，类似于 SQLParser
 */
public void selectByCondition(String name, String email) {
	QueryWrapper<User> queryWrapper = new QueryWrapper<>();
	queryWrapper.eq(StringUtils.isNotEmpty(name), "name", name);    // 当 name 有值时才会加到 查询条件中。
	queryWrapper.eq(StringUtils.isNotEmpty(email), "email", email); // 当 email 有值时才会加到 查询条件中。
	List<User> list = userMapper.selectList(queryWrapper);
	list.forEach(System.out::println);
}

/**
 * 实体作为条件构造器，类似于 SQLParser
 * 框架生成的语句为: SELECT id, name, age, email, manager_id, create_time FROM user WHERE name = '刘玉红' AND age = 32
 */
public void selectByWrapperEntity() {
	User whereUser = new User();
	whereUser.setName("刘玉红");
	whereUser.setAge(32);

	QueryWrapper<User> queryWrapper = new QueryWrapper<>(whereUser);
	List<User> list = userMapper.selectList(queryWrapper);
	list.forEach(System.out::println);
}

/**
 * Map 作为条件构造器
 * 框架生成的语句为: SELECT id, name, age, email, manager_id, create_time FROM user WHERE name = '刘玉红' AND age = 25 AND email IS NULL
 */
public void selectByWrapperAllEq() {
	Map<String, Object> params = new HashMap<>();
	params.put("name", "刘玉红");
	params.put("age", 25);
	params.put("email", null);

	QueryWrapper<User> queryWrapper = new QueryWrapper<>();
	queryWrapper.allEq(params);

	List<User> list = userMapper.selectList(queryWrapper);
	list.forEach(System.out::println);
}

/**
 * Map 作为条件构造器，null 值自动忽略
 * 框架生成的语句为: SELECT id, name, age, email, manager_id, create_time FROM user WHERE name = '刘玉红' AND age = 25
 */
public void selectByWrapperAllEq() {
	Map<String, Object> params = new HashMap<>();
	params.put("name", "刘玉红");
	params.put("age", 25);
	params.put("email", null);

	QueryWrapper<User> queryWrapper = new QueryWrapper<>();
	queryWrapper.allEq(params, false);

	List<User> list = userMapper.selectList(queryWrapper);
	list.forEach(System.out::println);
}

/**
 * 返回 List<Map> 结果集
 * 应用场景: 当表字段特别多的时候，你只需要查询其中的少数几列，没必要返回泛型为实体的类，因为绝大部分的字段都是 null，这样不优雅。
 * SQL: SELECT id,name FROM user WHERE name like '王%' AND age < 50
 */
public void selectByWrapperMaps() {
	QueryWrapper<User> queryWrapper = new QueryWrapper<>();
	queryWrapper.select("id", "name").likeRight("name", "王").lt("age", 50);
	List<Map<String, Object>> list = userMapper.selectMaps(queryWrapper);
	list.forEach(System.out::println);
}

/**
 * 返回 List<Map> 结果集
 * 应用场景: 当查询的不是表里的某一条记录，而是一个统计数据时。
 * SQL: SELECT avg(age) avg_age, min(age) min_age, max(age) max_age FROM user GROUP BY sum(age) < {0} HAVING sum(age) < 500
 */
public void selectByWrapperMaps() {
	QueryWrapper<User> queryWrapper = new QueryWrapper<>();
	queryWrapper.select("avg(age) avg_age", "min(age) min_age", "max(age) max_age")
		.groupBy("manager_id")
		.having("sum(age) < {0}", 500);
	List<Map<String, Object>> list = userMapper.selectMaps(queryWrapper);
	list.forEach(System.out::println);
}

/**
 * 返回 List<Map> 结果集
 * 应用场景: 不论 select 语句选择了几列，返回的 Object 只有第一列的数据。只返回一列的时候可以考虑用它。
 * SQL: SELECT id,name FROM user WHERE name like '王%' AND age < 50
 */
public void selectByWrapperObjs() {
	QueryWrapper<User> queryWrapper = new QueryWrapper<>();
	queryWrapper.select("id", "name").likeRight("name", "王").lt("age", 50);
	List<Object> list = userMapper.selectObjs(queryWrapper);
	list.forEach(System.out::println);
}

/**
 * SQL: SELECT COUNT(1) FROM user WHERE name like '王%' AND age < 50
 */
public void selectByWrapperCount() {
	QueryWrapper<User> queryWrapper = new QueryWrapper<>();
	queryWrapper.likeRight("name", "王").lt("age", 50);
	Integer count = userMapper.selectCount(queryWrapper);
	System.out.println("记录数: " + count);
}

/**
 * 如果查询出多条会直接报错: TooManyResultsException
 * SQL: SELECT id, name, age, email, manager_id, create_time FROM user WHERE name = '刘玉红' AND age = 50
 */
public void selectByWrapperOne() {
	QueryWrapper<User> queryWrapper = new QueryWrapper<>();
	queryWrapper.likeRight("name", "刘玉红").lt("age", 50);
	User user = userMapper.selectOne(queryWrapper);
	System.out.println(user);
}

/**
 * 基于 Lambda 表达式的条件构造器，这是 MP 最出彩的部分，应重点掌握！
 * 优势: 可以防止列名误写。
 * SQL: SELECT id, name, age, email, manager_id, create_time FROM user WHERE name LIKE '刘玉红%' AND age < 25
 */
public void selectLambda() {
	LambdaQueryWrapper<User> lambdaQueryWrapper = Wrappers.lambdaQuery();
	lambdaQueryWrapper.likeRight(User::getName, "刘玉红").lt(User::getAge, 25);
	List<User> users = userMapper.selectList(lambdaQueryWrapper);
	users.forEach(System.out::println);
}

/**
 * 基于 Lambda 表达式的条件构造器，带括号的
 * 优势: 可以防止列名误写。
 * SQL: SELECT id, name, age, email, manager_id, create_time FROM user WHERE name LIKE '%雨%' AND (age < 40 OR email IS NOT NULL)
 */
public void selectLambda() {
	LambdaQueryWrapper<User> lambdaQueryWrapper = Wrappers.lambdaQuery();
	lambdaQueryWrapper.like(User::getName, "雨")
		.and(lqw -> lqw.lt(User::getAge, 40).or().isNotNull(User::getEmail));
	List<User> users = userMapper.selectList(lambdaQueryWrapper);
	users.forEach(System.out::println);
}

public void insertOne() {
    // 插入
    User user = new User();
    user.setName("小羊");
    user.setAge(3);
    user.setEmail("abc@mp.com");
    assertThat(mapper.insert(user)).isGreaterThan(0);
    // 成功直接拿会写的 ID
    assertThat(user.getId()).isNotNull();
}

public void delete() {
    assertThat(mapper.deleteById(3L)).isGreaterThan(0);
    assertThat(mapper.delete(new QueryWrapper<User>()
            .lambda().eq(User::getName, "Sandy"))).isGreaterThan(0);
}

public void cUpdate() {
    assertThat(mapper.updateById(new User().setId(1L).setEmail("ab@c.c"))).isGreaterThan(0);
    assertThat(mapper.update(new User().setName("mp"),
            Wrappers.<User>lambdaUpdate()
                    .set(User::getAge, 3)
                    .eq(User::getId, 2))).isGreaterThan(0);
}

public void dSelect() {
    assertThat(mapper.selectById(1L).getEmail()).isEqualTo("ab@c.c");
    User user = mapper.selectOne(new QueryWrapper<User>().lambda().eq(User::getId, 2));
    assertThat(user.getName()).isEqualTo("mp");
    assertThat(user.getAge()).isEqualTo(3);
}

@Test
public void orderBy() {
    List<User> users = mapper.selectList(Wrappers.<User>query().orderByAsc("age"));
    assertThat(users).isNotEmpty();
}

@Test
public void selectMaps() {
    List<Map<String, Object>> mapList = mapper.selectMaps(Wrappers.<User>query().orderByAsc("age"));
    assertThat(mapList).isNotEmpty();
    assertThat(mapList.get(0)).isNotEmpty();
    System.out.println(mapList.get(0));
}

@Test
public void selectMapsPage() {
    IPage<Map<String, Object>> page = mapper.selectMapsPage(new Page<>(1, 5), Wrappers.<User>query().orderByAsc("age"));
    assertThat(page).isNotNull();
    assertThat(page.getRecords()).isNotEmpty();
    assertThat(page.getRecords().get(0)).isNotEmpty();
    System.out.println(page.getRecords().get(0));
}

@Test
public void orderByLambda() {
    List<User> users = mapper.selectList(Wrappers.<User>lambdaQuery().orderByAsc(User::getAge));
    assertThat(users).isNotEmpty();
}

    @Test
public void tests() {
    System.out.println("----- 普通查询 ------");
    List<User> plainUsers = userMapper.selectList(new QueryWrapper<User>().eq("role_id", 2L));
    List<User> lambdaUsers = userMapper.selectList(new QueryWrapper<User>().lambda().eq(User::getRoleId, 2L));
    Assert.assertEquals(plainUsers.size(), lambdaUsers.size());
    print(plainUsers);

    System.out.println("----- 带子查询(sql注入) ------");
    List<User> plainUsers2 = userMapper.selectList(new QueryWrapper<User>()
            .inSql("role_id", "select id from role where id = 2"));
    List<User> lambdaUsers2 = userMapper.selectList(new QueryWrapper<User>().lambda()
            .inSql(User::getRoleId, "select id from role where id = 2"));
    Assert.assertEquals(plainUsers2.size(), lambdaUsers2.size());
    print(plainUsers2);

    System.out.println("----- 带嵌套查询 ------");
    List<User> plainUsers3 = userMapper.selectList(new QueryWrapper<User>()
            .nested(i -> i.eq("role_id", 2L).or().eq("role_id", 3L))
            .and(i -> i.ge("age", 20)));
    List<User> lambdaUsers3 = userMapper.selectList(new QueryWrapper<User>().lambda()
            .nested(i -> i.eq(User::getRoleId, 2L).or().eq(User::getRoleId, 3L))
            .and(i -> i.ge(User::getAge, 20)));
    Assert.assertEquals(plainUsers3.size(), lambdaUsers3.size());
    print(plainUsers3);

    System.out.println("----- 自定义(sql注入) ------");
    List<User> plainUsers4 = userMapper.selectList(new QueryWrapper<User>()
            .apply("role_id = 2"));
    print(plainUsers4);

    UpdateWrapper<User> uw = new UpdateWrapper<>();
    uw.set("email", null);
    uw.eq("id",4);
    userMapper.update(new User(), uw);
    User u4 = userMapper.selectById(4);
    Assert.assertNull(u4.getEmail());


}

@Test
public void lambdaQueryWrapper(){
    System.out.println("----- 普通查询 ------");
    List<User> plainUsers = userMapper.selectList(new LambdaQueryWrapper<User>().eq(User::getRoleId, 2L));
    List<User> lambdaUsers = userMapper.selectList(new QueryWrapper<User>().lambda().eq(User::getRoleId, 2L));
    Assert.assertEquals(plainUsers.size(), lambdaUsers.size());
    print(plainUsers);

    System.out.println("----- 带子查询(sql注入) ------");
    List<User> plainUsers2 = userMapper.selectList(new LambdaQueryWrapper<User>()
            .inSql(User::getRoleId, "select id from role where id = 2"));
    List<User> lambdaUsers2 = userMapper.selectList(new QueryWrapper<User>().lambda()
            .inSql(User::getRoleId, "select id from role where id = 2"));
    Assert.assertEquals(plainUsers2.size(), lambdaUsers2.size());
    print(plainUsers2);

    System.out.println("----- 带嵌套查询 ------");
    List<User> plainUsers3 = userMapper.selectList(new LambdaQueryWrapper<User>()
            .nested(i -> i.eq(User::getRoleId, 2L).or().eq(User::getRoleId, 3L))
            .and(i -> i.ge(User::getAge, 20)));
    List<User> lambdaUsers3 = userMapper.selectList(new QueryWrapper<User>().lambda()
            .nested(i -> i.eq(User::getRoleId, 2L).or().eq(User::getRoleId, 3L))
            .and(i -> i.ge(User::getAge, 20)));
    Assert.assertEquals(plainUsers3.size(), lambdaUsers3.size());
    print(plainUsers3);

    System.out.println("----- 自定义(sql注入) ------");
    List<User> plainUsers4 = userMapper.selectList(new QueryWrapper<User>()
            .apply("role_id = 2"));
    print(plainUsers4);

    UpdateWrapper<User> uw = new UpdateWrapper<>();
    uw.set("email", null);
    uw.eq("id",4);
    userMapper.update(new User(), uw);
    User u4 = userMapper.selectById(4);
    Assert.assertNull(u4.getEmail());
}