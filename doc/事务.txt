事务管理方式:

  Spring支持编程式事务管理和声明式事务管理两种方式。

  编程式事务管理使用 TransactionTemplate 或者直接使用底层的 PlatformTransactionManager。
  对于编程式事务管理，Spring 推荐使用 TransactionTemplate。

  声明式事务管理建立在 AOP 之上的。其本质是对方法前后进行拦截，然后在目标方法开始之前创建或者加入一个事务，
  在执行完目标方法之后根据执行情况提交或者回滚事务。声明式事务最大的优点就是不需要通过编程的方式管理事务，
  这样就不需要在业务逻辑代码中掺杂事务管理的代码，只需在配置文件中做相关的事务规则声明(或通过基于@Transactional注解的方式)，
  便可以将事务规则应用到业务逻辑中。

  显然声明式事务管理要优于编程式事务管理，这正是 Spring 倡导的非侵入式的开发方式。
  声明式事务管理使业务代码不受污染，一个普通的POJO对象，只要加上注解就可以获得完全的事务支持。
  声明式事务管理也有两种常用的方式，一种是基于tx和aop名字空间的xml配置文件，另一种就是基于@Transactional注解。显然基于注解的方式更简单易用，更清爽。


事务隔离级别:

  隔离级别是指若干个并发的事务之间的隔离程度。TransactionDefinition 接口中定义了五个表示隔离级别的常量：
  TransactionDefinition.ISOLATION_DEFAULT：
    这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是TransactionDefinition.ISOLATION_READ_COMMITTED。
  TransactionDefinition.ISOLATION_READ_UNCOMMITTED：
    该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读，不可重复读和幻读，因此很少使用该隔离级别。
  TransactionDefinition.ISOLATION_READ_COMMITTED：
    该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。
  TransactionDefinition.ISOLATION_REPEATABLE_READ：
    该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。该级别可以防止脏读和不可重复读。
  TransactionDefinition.ISOLATION_SERIALIZABLE：
    所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。
    但是这将严重影响程序的性能。通常情况下也不会用到该级别。

事务传播行为:

  所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。
  在TransactionDefinition定义中包括了如下几个表示传播行为的常量：

  TransactionDefinition.PROPAGATION_REQUIRED：
    如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。这是默认值。
  TransactionDefinition.PROPAGATION_REQUIRES_NEW：
    创建一个新的事务，如果当前存在事务，则把当前事务挂起。
  TransactionDefinition.PROPAGATION_SUPPORTS：
    如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。
  TransactionDefinition.PROPAGATION_NOT_SUPPORTED：
    以非事务方式运行，如果当前存在事务，则把当前事务挂起。
  TransactionDefinition.PROPAGATION_NEVER：
    以非事务方式运行，如果当前存在事务，则抛出异常。
  TransactionDefinition.PROPAGATION_MANDATORY：
    如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。
  TransactionDefinition.PROPAGATION_NESTED：
    如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；
    如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。

事务超时:

  所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。
  在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。
  默认设置为底层事务系统的超时值，如果底层数据库事务系统没有设置超时值，那么就是none，没有超时限制。

事务只读属性:

  只读事务用于客户代码只读但不修改数据的情形，只读事务用于特定情景下的优化，比如使用Hibernate的时候。
  默认为读写事务。

Spring 事务回滚规则:

  指示 Spring 事务管理器回滚一个事务的推荐方法是在当前事务的上下文内抛出异常。Spring 事务管理器会捕捉任何未处理的异常，
  然后依据规则决定是否回滚抛出异常的事务。
  默认配置下，Spring 只有在抛出的异常为运行时 unchecked 异常时才回滚该事务，也就是抛出的异常为 RuntimeException 的子类
  (Errors也会导致事务回滚)，而抛出 checked 异常则不会导致事务回滚。

用法:

  @Transactional 可以作用于接口、接口方法、类以及类方法上。当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，
  同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。

  @Transactional 注解可以作用于接口、接口方法、类以及类方法上，但是 Spring 建议不要在接口或者接口方法上使用该注解，
  因为这只有在使用基于接口的代理时它才会生效。另外， @Transactional 注解应该只被应用到 public 方法上，这是由 Spring AOP 的本质决定的。
  如果你在 protected、private 或者默认可见性的方法上使用 @Transactional 注解，这将被忽略，也不会抛出任何异常。

  默认情况下，只有来自外部的方法调用才会被AOP代理捕获，也就是，类内部方法调用本类内部的其他方法并不会引起事务行为，
  即使被调用方法使用 @Transactional 注解进行修饰。
  